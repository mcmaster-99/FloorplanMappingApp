"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _awsSignatureV = require('aws-signature-v4');

var _awsSignatureV2 = _interopRequireDefault(_awsSignatureV);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _client = require('mqtt/lib/client');

var _client2 = _interopRequireDefault(_client);

var _websocketStream = require('websocket-stream');

var _websocketStream2 = _interopRequireDefault(_websocketStream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AWSMqtt = function (_MqttClient) {
  _inherits(AWSMqtt, _MqttClient);

  function AWSMqtt() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, AWSMqtt);

    var endpointAddress = options.endpointAddress;
    var accessKeyId = options.accessKeyId;
    var secretAccessKey = options.secretAccessKey;
    var sessionToken = options.sessionToken;
    var region = options.region;
    var _options$expires = options.expires;
    var expires = _options$expires === undefined ? 15 : _options$expires;
    var wsOptions = options.wsOptions;

    var mqttOptions = _objectWithoutProperties(options, ['endpointAddress', 'accessKeyId', 'secretAccessKey', 'sessionToken', 'region', 'expires', 'wsOptions']);

    return _possibleConstructorReturn(this, (AWSMqtt.__proto__ || Object.getPrototypeOf(AWSMqtt)).call(this, function () {
      var url = _awsSignatureV2.default.createPresignedURL('GET', endpointAddress, '/mqtt', 'iotdevicegateway', _crypto2.default.createHash('sha256').update('', 'utf8').digest('hex'), {
        key: accessKeyId,
        secret: secretAccessKey,
        region: region,
        expires: expires,
        protocol: 'wss'
      });
      if (sessionToken) {
        url += '&X-Amz-Security-Token=' + encodeURIComponent(sessionToken);
      }
      return (0, _websocketStream2.default)(url, ['mqttv3.1'], wsOptions);
    }, mqttOptions));
  }

  return AWSMqtt;
}(_client2.default);

exports.default = AWSMqtt;